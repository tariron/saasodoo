version: '3.8'

services:
  # Reverse Proxy & Load Balancer
  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ../traefik/dynamic:/etc/traefik/dynamic:ro
    networks:
      - saasodoo-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${BASE_DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$rQ7yX9kx3bX8rQ7yX9kx3e"  # admin:admin
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${POSTGRES_MULTIPLE_DATABASES}
      # Service user passwords for initialization scripts
      POSTGRES_READONLY_PASSWORD: ${POSTGRES_READONLY_PASSWORD}
      POSTGRES_BACKUP_PASSWORD: ${POSTGRES_BACKUP_PASSWORD}
      POSTGRES_AUTH_SERVICE_PASSWORD: ${POSTGRES_AUTH_SERVICE_PASSWORD}
      POSTGRES_BILLING_SERVICE_PASSWORD: ${POSTGRES_BILLING_SERVICE_PASSWORD}
      POSTGRES_INSTANCE_SERVICE_PASSWORD: ${POSTGRES_INSTANCE_SERVICE_PASSWORD}
    volumes:
      - /mnt/cephfs/postgres_data:/var/lib/postgresql/data
      - ../../shared/configs/postgres:/docker-entrypoint-initdb.d
    networks:
      - saasodoo-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-odoo_user} -d ${POSTGRES_DB:-odoo}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    labels:
      - "traefik.enable=false"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - /mnt/cephfs/redis_data:/data
      - ../../shared/configs/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - saasodoo-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    labels:
      - "traefik.enable=false"
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s

  # Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-saasodoo}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-saasodoo123}
      RABBITMQ_DEFAULT_VHOST: saasodoo
    volumes:
      - /mnt/cephfs/rabbitmq_data:/var/lib/rabbitmq
    networks:
      - saasodoo-network
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.${BASE_DOMAIN}`)"
      - "traefik.http.routers.rabbitmq.service=rabbitmq"
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - /mnt/cephfs/prometheus_data:/prometheus
    networks:
      - saasodoo-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${BASE_DOMAIN}`)"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    deploy:
      replicas: 1
      restart_policy:
        condition: any

  # Development Tools
  mailhog:
    image: mailhog/mailhog:latest
    networks:
      - saasodoo-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mail.${BASE_DOMAIN}`)"
      - "traefik.http.routers.mailhog.service=mailhog"
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
    deploy:
      replicas: 1
      restart_policy:
        condition: any

  # ===== BILLING INFRASTRUCTURE =====
  
  # KillBill MariaDB Database (with pre-built schemas)
  killbill-db:
    image: killbill/mariadb:0.24
    environment:
      MYSQL_ROOT_PASSWORD: killbill
    volumes:
      - /mnt/cephfs/killbill_db_data:/var/lib/mysql
      #- ../../shared/configs/killbill:/docker-entrypoint-initdb.d:ro
    networks:
      - saasodoo-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "traefik.enable=false"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s

  # KillBill Billing Engine
  killbill:
    image: killbill/killbill:0.24.15
    environment:
      # Database Configuration
      KILLBILL_DAO_URL: jdbc:mysql://killbill-db:3306/killbill
      KILLBILL_DAO_USER: root
      KILLBILL_DAO_PASSWORD: killbill
      
      # API Credentials
      KILLBILL_SERVER_MULTITENANT: "true"
      KILLBILL_CONFIG_OSGI_BUNDLE_CACHE_NAME: felix-cache
      
      # API credentials from .env file
      KILLBILL_USERNAME: ${KILLBILL_USERNAME}
      KILLBILL_PASSWORD: ${KILLBILL_PASSWORD}
      KILLBILL_API_SECRET: ${KILLBILL_API_SECRET}
      KILLBILL_API_KEY: ${KILLBILL_API_KEY}
      
      # JVM Memory settings
      KILLBILL_JVM_PERM_SIZE: 512m
      KILLBILL_JVM_MAX_PERM_SIZE: 1G
      
      # Webhook Configuration
      KILLBILL_NOTIFICATION_URL: http://billing-service:8004/api/billing/webhooks/killbill
      KILLBILL_NOTIFICATION_NB_THREADS: 3
      KILLBILL_NOTIFICATION_QUEUE_CAPACITY: 100
      
      # HTTP Client Configuration - Disable HTTP/2
      KILLBILL_SERVER_HTTP_CLIENT_ENABLE_HTTP2: "false"
      KILLBILL_HTTP_CLIENT_DISABLE_HTTP2: "true"

      # Test Mode Configuration - Enable clock manipulation
      KILLBILL_SERVER_TEST_MODE: "true"
    networks:
      - saasodoo-network
    depends_on:
      - killbill-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/1.0/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 180s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.killbill.rule=Host(`billing.${BASE_DOMAIN}`)"
      - "traefik.http.routers.killbill.service=killbill"
      - "traefik.http.services.killbill.loadbalancer.server.port=8080"
    ports:
      - "8081:8080"  # Direct access to KillBill API (avoids Traefik port conflict)
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s

  # Kaui Admin UI for KillBill
  kaui:
    image: killbill/kaui:latest
    environment:
      # Database Configuration for Kaui
      KAUI_KILLBILL_URL: http://killbill:8080
      KAUI_KILLBILL_API_KEY: lazar
      KAUI_KILLBILL_API_SECRET: bob
      
      # Kaui Database (shared with KillBill)
      KAUI_CONFIG_DAO_URL: jdbc:mysql://killbill-db:3306/kaui
      KAUI_CONFIG_DAO_USER: root
      KAUI_CONFIG_DAO_PASSWORD: killbill
      
      # Default admin credentials
      KAUI_ROOT_USERNAME: admin
      KAUI_ROOT_PASSWORD: password
      
      # Enable automatic database migration
      KAUI_CONFIG_CURRENCY: USD
    networks:
      - saasodoo-network
    depends_on:
      - killbill
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kaui.rule=Host(`billing-admin.${BASE_DOMAIN}`)"
      - "traefik.http.routers.kaui.service=kaui"
      - "traefik.http.services.kaui.loadbalancer.server.port=8080"
    ports:
      - "9090:8080"  # Direct access to Kaui Admin (avoids Grafana port conflict)
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 10s

  # ===== MICROSERVICES =====
  
  # User Service - Customer Authentication & Management
  user-service:
    image: compose-user-service:latest
    environment:
      # Database Configuration - Service-specific credentials
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: auth
      DB_SERVICE_USER: ${POSTGRES_AUTH_SERVICE_USER:-auth_service}
      DB_SERVICE_PASSWORD: ${POSTGRES_AUTH_SERVICE_PASSWORD:-auth_service_secure_pass_change_me}

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      JWT_ALGORITHM: HS256
      JWT_EXPIRE_MINUTES: ${JWT_EXPIRE_MINUTES:-1440}
      
      # Notification Service Configuration
      NOTIFICATION_SERVICE_URL: ${NOTIFICATION_SERVICE_URL:-http://notification.saasodoo.local}
      
      # Application Configuration
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ../../shared:/app/shared:ro  # Mount shared schemas
    networks:
      - saasodoo-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      # API routes
      - "traefik.http.routers.user-service.rule=Host(`api.${BASE_DOMAIN}`) && PathPrefix(`/user`)"
      - "traefik.http.routers.user-service.service=user-service"
      - "traefik.http.services.user-service.loadbalancer.server.port=8001"
      # Auth routes  
      - "traefik.http.routers.user-auth.rule=Host(`auth.${BASE_DOMAIN}`)"
      - "traefik.http.routers.user-auth.service=user-service"
      # Strip /user prefix for clean API
      - "traefik.http.middlewares.user-strip.stripprefix.prefixes=/user"
      - "traefik.http.routers.user-service.middlewares=user-strip"
    ports:
      - "8001:8001"  # Expose user-service port to host
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s


  # Instance Service - Odoo Instance Operations & Lifecycle Management
  instance-service:
    image: compose-instance-service:latest
    environment:
      # Database Configuration - Service-specific credentials
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: instance
      DB_SERVICE_USER: ${POSTGRES_INSTANCE_SERVICE_USER:-instance_service}
      DB_SERVICE_PASSWORD: ${POSTGRES_INSTANCE_SERVICE_PASSWORD:-instance_service_secure_pass_change_me}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Docker Configuration (for instance lifecycle management)
      DOCKER_HOST: unix:///var/run/docker.sock
      
      # Instance Configuration
      ODOO_INSTANCES_PATH: ${ODOO_INSTANCES_PATH:-/var/lib/odoo/instances}
      ODOO_BACKUPS_PATH: ${ODOO_BACKUPS_PATH:-/var/lib/odoo/backups}
      DEFAULT_ODOO_VERSION: ${DEFAULT_ODOO_VERSION:-17.0}
      
      # Instance Limits
      MAX_INSTANCES_PER_USER: ${MAX_INSTANCES_PER_USER:-5}
      INSTANCE_CPU_LIMIT: ${INSTANCE_CPU_LIMIT:-1.0}
      INSTANCE_MEMORY_LIMIT: ${INSTANCE_MEMORY_LIMIT:-2G}
      INSTANCE_STORAGE_LIMIT: ${INSTANCE_STORAGE_LIMIT:-10G}
      
      # Monitoring Configuration
      AUTO_START_MONITORING: ${AUTO_START_MONITORING:-true}
      
      # Application Configuration
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ../../shared:/app/shared:ro  # Mount shared schemas
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket for container management
      - /mnt/cephfs/odoo_instances:/var/lib/odoo/instances  # Instance storage
      - /mnt/cephfs/odoo_backups:/var/lib/odoo/backups  # Backup storage
      - /mnt/cephfs:/mnt/cephfs:rw  # CephFS mount for quota management
    networks:
      - saasodoo-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      # API routes
      - "traefik.http.routers.instance-service.rule=Host(`api.${BASE_DOMAIN}`) && PathPrefix(`/instance`)"
      - "traefik.http.routers.instance-service.service=instance-service"
      - "traefik.http.services.instance-service.loadbalancer.server.port=8003"
      # Strip /instance prefix for clean API
      - "traefik.http.middlewares.instance-strip.stripprefix.prefixes=/instance"
      - "traefik.http.routers.instance-service.middlewares=instance-strip"
    ports:
      - "8003:8003"  # Expose instance-service port to host
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s

  # Instance Service Worker - Background Task Processing
  instance-worker:
    image: compose-instance-worker:latest
    user: appuser
    stop_signal: SIGQUIT
    stop_grace_period: 60s
    command: celery -A app.celery_config worker --loglevel=info --queues=instance_provisioning,instance_operations,instance_maintenance,instance_monitoring
    environment:
      # Database Configuration - Service-specific credentials
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: instance
      DB_SERVICE_USER: ${POSTGRES_INSTANCE_SERVICE_USER:-instance_service}
      DB_SERVICE_PASSWORD: ${POSTGRES_INSTANCE_SERVICE_PASSWORD:-instance_service_secure_pass_change_me}
      
      # Database Configuration - Admin credentials for creating new databases (SECURITY ISSUE - TO FIX)
      POSTGRES_USER: ${POSTGRES_USER:-odoo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # RabbitMQ Configuration
      RABBITMQ_USER: ${RABBITMQ_USER:-saasodoo}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-saasodoo123}
      
      # Docker Configuration (for instance lifecycle management)
      DOCKER_HOST: unix:///var/run/docker.sock
      
      # Application Configuration
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ../../shared:/app/shared:ro  # Mount shared schemas
      - /var/run/docker.sock:/var/run/docker.sock  # Docker socket for container management
      - /mnt/cephfs/odoo_backups:/var/lib/odoo/backups  # Backup storage
      - /mnt/cephfs:/mnt/cephfs:rw  # CephFS mount for quota management
    networks:
      - saasodoo-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.celery_config inspect ping -d celery@$$HOSTNAME"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=false"
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s

  # Billing Service - KillBill Integration & Billing Management
  billing-service:
    image: compose-billing-service:latest
    environment:
      # Database Configuration - Service-specific credentials
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: billing
      DB_SERVICE_USER: ${POSTGRES_BILLING_SERVICE_USER:-billing_service}
      DB_SERVICE_PASSWORD: ${POSTGRES_BILLING_SERVICE_PASSWORD:-billing_service123}
      
      # KillBill Configuration
      KILLBILL_URL: ${KILLBILL_URL:-http://killbill:8080}
      KILLBILL_API_KEY: ${KILLBILL_API_KEY}
      KILLBILL_API_SECRET: ${KILLBILL_API_SECRET}
      KILLBILL_USERNAME: ${KILLBILL_USERNAME}
      KILLBILL_PASSWORD: ${KILLBILL_PASSWORD}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379

      # Application Configuration
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}

      # Paynow Configuration
      PAYNOW_INTEGRATION_ID: ${PAYNOW_INTEGRATION_ID}
      PAYNOW_INTEGRATION_KEY: ${PAYNOW_INTEGRATION_KEY}
      PAYNOW_MERCHANT_EMAIL: ${PAYNOW_MERCHANT_EMAIL}
      PAYNOW_RESULT_URL: http://billing-service:8004/api/billing/webhooks/paynow
      PAYNOW_BASE_URL: ${PAYNOW_BASE_URL:-https://www.paynow.co.zw}
    volumes:
      - ../../shared:/app/shared:ro  # Mount shared schemas
    networks:
      - saasodoo-network
    depends_on:
      - postgres
      - redis
      - killbill
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      # API routes
      - "traefik.http.routers.billing-service.rule=Host(`api.${BASE_DOMAIN}`) && PathPrefix(`/billing`)"
      - "traefik.http.routers.billing-service.service=billing-service"
      - "traefik.http.services.billing-service.loadbalancer.server.port=8004"
      # Strip /billing prefix for clean API
      - "traefik.http.middlewares.billing-strip.stripprefix.prefixes=/billing"
      - "traefik.http.routers.billing-service.middlewares=billing-strip"
    ports:
      - "8004:8004"  # Expose billing-service port to host
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s

  # Frontend Service - React SPA with Flask backend
  frontend-service:
    image: compose-frontend-service:latest
    ports:
      - "3000:3000"  # Direct access for debugging
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=true
      - BASE_DOMAIN=${BASE_DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`app.${BASE_DOMAIN}`)"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.services.frontend.loadbalancer.healthcheck.path=/health"
    networks:
      - saasodoo-network
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s

  # Notification Service - Email and Notification Management
  notification-service:
    image: compose-notification-service:latest
    environment:
      # SMTP Configuration (Development - MailHog)
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USE_TLS: "false"
      SMTP_USE_SSL: "false"
      SMTP_TIMEOUT: 30
      
      # SMTP Authentication (empty for MailHog)
      SMTP_USERNAME: 
      SMTP_PASSWORD: 
      
      # Email Defaults
      DEFAULT_FROM_EMAIL: noreply@saasodoo.local
      DEFAULT_FROM_NAME: SaaS Odoo Platform
      
      # Rate Limiting
      MAX_EMAILS_PER_MINUTE: 60
      MAX_EMAILS_PER_HOUR: 1000
      
      # Database Configuration
      DB_DATABASE_URL: postgresql://notification_service:notification_service_secure_pass_change_me@postgres:5432/communication
      DB_POOL_SIZE: 10
      DB_MAX_OVERFLOW: 20
      
      # Application Configuration
      APP_DEBUG: ${DEBUG:-true}
      APP_SERVICE_NAME: notification-service
      APP_SERVICE_VERSION: 1.0.0
      APP_API_PREFIX: /api/v1
      APP_TEMPLATES_DIR: app/templates
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ../../shared:/app/shared:ro  # Mount shared schemas
    networks:
      - saasodoo-network
    depends_on:
      - postgres
      - mailhog
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:5000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification.rule=Host(`notification.${BASE_DOMAIN}`)"
      - "traefik.http.routers.notification.service=notification"
      - "traefik.http.services.notification.loadbalancer.server.port=5000"
      - "traefik.http.services.notification.loadbalancer.healthcheck.path=/health"
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s

networks:
  saasodoo-network:
    driver: overlay
    attachable: true
    name: saasodoo-network
-- PostgreSQL Users and Permissions Setup
-- Create service-specific users for Odoo SaaS Kit
-- Environment variables will be substituted by the shell wrapper

-- Note: This script relies on environment variables passed by the initialization process

-- Create read-only user for monitoring and analytics
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'readonly_user') THEN
        CREATE ROLE readonly_user WITH LOGIN PASSWORD '${POSTGRES_READONLY_PASSWORD}';
    END IF;
END
$$;

-- Create backup user for database maintenance
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'backup_user') THEN
        CREATE ROLE backup_user WITH LOGIN PASSWORD '${POSTGRES_BACKUP_PASSWORD}' REPLICATION;
    END IF;
END
$$;

-- Create application-specific users
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'auth_service') THEN
        CREATE ROLE auth_service WITH LOGIN PASSWORD '${POSTGRES_AUTH_SERVICE_PASSWORD}';
    END IF;
END
$$;

DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'billing_service') THEN
        CREATE ROLE billing_service WITH LOGIN PASSWORD '${POSTGRES_BILLING_SERVICE_PASSWORD}';
    END IF;
END
$$;


DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'instance_service') THEN
        CREATE ROLE instance_service WITH LOGIN PASSWORD '${POSTGRES_INSTANCE_SERVICE_PASSWORD}';
    END IF;
END
$$;

-- Grant permissions to read-only user
GRANT CONNECT ON DATABASE saas_odoo TO readonly_user;
GRANT CONNECT ON DATABASE auth TO readonly_user;
GRANT CONNECT ON DATABASE billing TO readonly_user;
GRANT CONNECT ON DATABASE instance TO readonly_user;
GRANT CONNECT ON DATABASE communication TO readonly_user;
GRANT CONNECT ON DATABASE analytics TO readonly_user;

-- Grant schema permissions (will be applied when schemas are created)
GRANT USAGE ON SCHEMA public TO readonly_user;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly_user;

-- Grant permissions to service users
GRANT ALL PRIVILEGES ON DATABASE auth TO auth_service;
GRANT ALL PRIVILEGES ON DATABASE billing TO billing_service;
GRANT ALL PRIVILEGES ON DATABASE instance TO instance_service;

-- Grant table-level permissions for each service user on their database
-- Auth service permissions on auth database
\c auth;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO auth_service;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO auth_service;

-- Billing service permissions on billing database  
\c billing;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO billing_service;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO billing_service;


-- Instance service permissions on instance database
\c instance;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO instance_service;
ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO instance_service;

-- Return to main database
\c saas_odoo;

-- Grant backup permissions
GRANT CONNECT ON DATABASE saas_odoo TO backup_user;
GRANT CONNECT ON DATABASE auth TO backup_user;
GRANT CONNECT ON DATABASE billing TO backup_user;
GRANT CONNECT ON DATABASE instance TO backup_user;
GRANT CONNECT ON DATABASE communication TO backup_user;
GRANT CONNECT ON DATABASE analytics TO backup_user; 